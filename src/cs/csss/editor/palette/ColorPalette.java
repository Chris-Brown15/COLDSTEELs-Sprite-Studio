/**
 * 
 */
package cs.csss.editor.palette;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.ListIterator;
import java.util.Objects;
import java.util.function.Supplier;

import cs.csss.engine.ColorPixel;

/**
 * Color palettes are objects that can generate an array of colors via their {@link ColorPalette#generate() generate()} method. The size of this 
 * array is {@link ColorPalette #valueScale() valueScale()}.
 */
public abstract class ColorPalette {

	//list of all generators
	private static final List<ColorPalette> generators = Collections.synchronizedList(new ArrayList<>());
	
	/**
	 * Returns an iterator of color palettes.
	 * 
	 * @return List iterator over constructed palettes.
	 */
	public static final ListIterator<ColorPalette> palettes() {
		
		return generators.listIterator();
		
	}
	
	/**
	 * Removes the first color palette of the given name.
	 * 
	 * @param name — name of a color palette to remove
	 * @return The removed color palette.
	 */
	public static final ColorPalette remove(String name) {
		
		ListIterator<ColorPalette> iter = palettes();
		ColorPalette x = null;
		while(iter.hasNext()) {
			
			x = iter.next();
			if(x.name.equals(name)) { 
				
				iter.remove();
				return x;
				
			}
			
		}
		
		return null;
		
	}

	/**
	 * Creates a new pixel store, copying the {@link cs.csss.annotation.Nullable @Nullable} original into the new one if necessary and ensuring 
	 * there are no {@code null} elements of the resulting array.
	 * 
	 * @param <T> — type of the pixel to be stored and the array to contain them
	 * @param original — original array
	 * @param destination — destination array
	 * @param pixelCreator — supplier of pixels when creating new ones is needed.
	 * @return destination array after resizing and copying.
	 */
	public static <T extends ColorPixel> T[] resizePalette(T[] original , T[] destination , Supplier<T> pixelCreator) { 
		
		Objects.requireNonNull(destination);
		Objects.requireNonNull(pixelCreator);
		
		boolean nullPalette = original == null;
 		if(!nullPalette) System.arraycopy(original, 0, destination, 0, Math.min(original.length, destination.length)); 
 		
 		int start = nullPalette ? 0 : original.length;	 		
 		if(nullPalette || original.length < destination.length) for(int i = start ; i < destination.length ; i++) if(destination[i] == null) {
 				
 			destination[i] = pixelCreator.get();
 			
 		}
 		
 		return destination;
 		
	}
	
	/**
	 * Name of the palette as displayed to the user.
	 */
	public final String name;
	
	/**
	 * The number of values to generate each time {@code generate} is invoked.
	 */
	public int valueScale;
	
	private boolean show = true;
	
	/**
	 * Creates a color generator for a palette with the given name and value scale.
	 * @param name — name of the palette generated by this generator
	 * @param valueScale — number of elements the resulting palette will contain, and possibly affects the way palette values will be generated
	 */
	public ColorPalette(String name , int initialValueScale) {
	
		this.name = name;
		setValueScale(initialValueScale);
		generators.add(this);
		
	}
	
	/**
	 * Creates a color palette but does not set its initial value scale value. 
	 * 
	 * @param name — name of the palette generated by this generator
	 */
	public ColorPalette(String name) {
		
		this.name = name;
		generators.add(this);
		
	}
	
	/**
	 * Default implementation of a {@link ColorPalette#setValueScale(int) setValueScale} method.
	 * 
	 * @param valueScale — new value scale value
	 */
	public void defaultSetValueScale(int valueScale) {
		
		if(valueScale <= 0) throw new IllegalArgumentException(valueScale + " is not a valid value scale value.");
		this.valueScale = valueScale;
				
	}

	/**
	 * Sets the new value scale, affecting the size of generated palettes.
	 * 
	 * @param valueScale — new value scale value
	 */
	public abstract void setValueScale(int valueScale);
	
	/**
	 * Returns this color palette's value scale.
	 * 
	 * @return Value scale of this palette.
	 */
	public int valueScale() {
		
		return valueScale;
		
	}
	
	/**
	 * Generates an array of color pixels from the given source pixel and of the given value scale according to the semantics of the implementor.
	 * 
	 * @param source — pixel to draw from
	 * @param channels — channels resulting pixels will contain
	 * @return Array containing color pixels containing palette colors.
	 */
	public abstract ColorPixel[] generate(ColorPixel source, int channels);
	
	/**
	 * Gets the array of colors that was last generated.
	 * 
	 * @return Array containing color pixels.
	 */
	public abstract ColorPixel[] get();
	
	/**
	 * Returns whether to show this palette in the UI.
	 * 
	 * @return Whether to show this palette in the UI.
	 */
	public boolean show() {
		
		return show;
		
	}
	
	/**
	 * Sets whether to show this palette in the UI.
	 * 
	 * @param show — whether to show this palette in the UI
	 */
	public void show(boolean show) { 
		
		this.show = show;
		
	}
	
	/**
	 * Toggles whether to show this palette in the UI.
	 */
	public void toggleShow() {
		
		this.show = !show;
		
	}
	
}
